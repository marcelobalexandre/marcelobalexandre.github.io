<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: .net | Marcelo Alexandre]]></title>
  <link href="http://www.marcelobalexandre.com/blog/categories/dot-net/atom.xml" rel="self"/>
  <link href="http://www.marcelobalexandre.com/"/>
  <updated>2014-10-27T19:51:32-02:00</updated>
  <id>http://www.marcelobalexandre.com/</id>
  <author>
    <name><![CDATA[Marcelo Alexandre]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Manutenção De Schema De Banco De Dados Com Migrations Em .NET]]></title>
    <link href="http://www.marcelobalexandre.com/blog/2014/10/26/manutencao-de-schema-de-banco-de-dados-com-migrations-em-net/"/>
    <updated>2014-10-26T19:55:00-02:00</updated>
    <id>http://www.marcelobalexandre.com/blog/2014/10/26/manutencao-de-schema-de-banco-de-dados-com-migrations-em-net</id>
    <content type="html"><![CDATA[<p>A manutenção de schema de banco de dados é algo importante e delicado em qualquer projeto de desenvolvimento de software. Quando o assunto é banco de dados, todos os desenvolvedores do time precisam estar na mesma página para que possamos realizar mudanças rápidas e com o mínimo de propensão a falhas possível. Com o intuito de atingirmos esses objetivos é importante que o schema do banco de dados esteja protegido pelo nosso controle de versão, e que de preferência, faça parte do processo de Integração Contínua do projeto.</p>

<p>Normalmente o processo de atualização e manutenção de schema de banco de dados é realizado de maneira manual através da criação de scripts SQL e/ou utilização de softwares que geram estes scripts a partir da comparação de dois bancos de dados. Apesar deste processo funcionar em muitos projetos existentes, ele exige muita intervenção manual, o que pode acabar atrasando o lançamento de uma nova versão do sistema e prejudicando os processos de Integração Contínua do projeto.</p>

<p>Uma maneira interessante de abordar a manutenção de schema de banco de dados é através da utilização de migrations. Neste post irei explanar um pouco sobre migrations e demonstrar uma abordagem de como utilizá-las em projetos .NET através de um ótimo framework, o <a href="https://github.com/schambers/fluentmigrator" target="_blank">FluentMigrator</a></p>

<!--more-->


<h1>O Básico Sobre Migrations</h1>

<p>As migrations surgiram como uma alternativa as alterações de banco de dados através da escrita de SQL, bem como uma maneira de evoluir o schema de banco de dados de uma forma gradativa, maneira essa muito válida quando se adota metodologias ágeis. As migrations normalmente são escritas em uma linguagem de programação mais simples para descrever as mudanças no banco de dados, o que normalmente facilita a escrita e a leitura das mesmas.</p>

<p>Esse conceito de migrations foi popularizado pela comunidade <a href="http://rubyonrails.org/" target="_blank">Ruby on Rails</a> que o aplica através das <a href="http://guides.rubyonrails.org/migrations.html" target="_blank">Active Record Migrations</a>, de onde o FluentMigrator buscou inspiração.</p>

<h2>Implementando o FluentMigrator</h2>

<p>A abordagem que irei demonstrar neste post é a que tenho utilizado e recomendado atualmente, mas ela é apenas uma das possíveis maneiras de utilização do FluentMigrator, fique a vontade para implementar da maneira que achar mais interessante para os seus projetos.</p>

<p>Para auxiliar este post eu desenvolvi um pequeno projeto de exemplo que pode ser encontrado em <a href="https://github.com/marcelobalexandre/fluentmigrator-poc" target="_blank">github.com/marcelobalexandre/fluentmigrator-poc</a>.</p>

<p>Como é possível verificar na imagem abaixo eu organizei a estrutura do projeto de exemplo da seguinte maneira:</p>

<ul>
<li><strong>Scripts</strong>: nesta pasta são mantidos os scripts SQL, nesse caso temos o de criação do banco de dados e um script de criação de tabelas antes da implementação do FluentMigrator.</li>
<li><strong>MyProject.Data.Migrations</strong>: neste projeto temos as migrations organizadas em pastas com o número da versão do projeto a que se referem e o MyProjectMigrator que é responsável por executar as migrações.</li>
<li><strong>MyProjectMigratorRunner</strong>: este projeto é um Console Application que utiliza o MyProjectMigrator para executar as migrações.</li>
</ul>


<p><img src="/images/manutencao-de-schema-de-banco-de-dados-com-migrations-em-net/solution-explorer.png"></p>

<p>Minha recomendação é criar um projeto separado que conterá as migrations e o nosso Migrator, que no projeto de exemplo chamei de MyProject.Data.Migrations. Basta criar uma Class Library e instalar o Fluent Migrator e o Fluent Migrator Runner utilizando o NuGet.</p>

<h2>Criando um Migrator Runner</h2>

<p>Para executarmos as migrations podemos utilizar o Command Line Runner (executável do próprio FluentMigrator), o MSBuild, o Rake, ou outros. Eu particularmente prefiro criar um Runner próprio para o projeto, que neste caso chamei de MyProjectMigrator.</p>

<p>Como é possível observar no código abaixo, o MyProjectMigrator é bastante simples e fácil de usar, basta invocar o método <code>Migrate</code> passando como parâmetros a ação que deseja realizar (Up ou Down), a string de conexão com o banco de dados e o MigratorEnvironment. O MigratorEnvironment é um Enumerable que criei para que você possa executar ações diferentes nas migrations dependendo do ambiente, muito útil para por exemplo, criar dados fakes (seeds) no ambiente de desenvolvimento e realizar ações exclusivas para os testes unitários. É importante observar que neste exemplo o MyProjectMigrator espera uma string de conexão para o SQL Server 2012, se o seu caso é diferente basta alterá-lo.</p>

<pre><code class="c# MyProjectMigrator.cs">using FluentMigrator;
using FluentMigrator.Runner;
using FluentMigrator.Runner.Announcers;
using FluentMigrator.Runner.Initialization;
using FluentMigrator.Runner.Processors.SqlServer;
using System;
using System.Reflection;

namespace MyProject.Data.Migrations
{
    public enum MigratorEnvironment
    {
        Development,
        Test,
        Production
    }

    public static class MyProjectMigrator
    {
        private class MigrationOptions : IMigrationProcessorOptions
        {
            public bool PreviewOnly { get; set; }

            public int Timeout { get; set; }

            public string ProviderSwitches
            {
                get { throw new NotImplementedException(); }
            }
        }

        public static void Migrate(Action&lt;IMigrationRunner&gt; migrationRunnerAction,
                                   string connectionString,
                                   MigratorEnvironment migratorEnvironment)
        {
            Assembly assembly = Assembly.GetExecutingAssembly();

            var textWriterAnnouncer = new TextWriterAnnouncer(write =&gt; Console.WriteLine(write));
            var runnerContext = new RunnerContext(textWriterAnnouncer);
            runnerContext.ApplicationContext = migratorEnvironment;

            var migrationOptions = new MigrationOptions { PreviewOnly = false, Timeout = 0 };
            var processorFactory = new SqlServer2012ProcessorFactory();
            var processor = processorFactory.Create(connectionString,
                                                    textWriterAnnouncer,
                                                    migrationOptions);

            var migrationRunner = new MigrationRunner(assembly, runnerContext, processor);
            migrationRunnerAction(migrationRunner);
        }
    }
}
</code></pre>

<h2>Criando as Migrations</h2>

<p>Recomendo a leitura da <a href="https://github.com/schambers/fluentmigrator/wiki/Migration" target="_blank">documentação oficial</a> sobre a criação de migrations que é bem direta e de fácil entendimento, mas basicamente para criamos uma migration é preciso criar uma nova classe que derive da classe abstrata <code>Migration</code> e implemente dois métodos, o <code>Up</code> e o <code>Down</code>. Além disso você devera adicionar o atributo Migration que aceita valores Int64, esse atributo será utilizado para identificar a migration, é baseado nesse atributo que o FluentMigrator vai saber se já rodou ou não a migration.</p>

<p>A classe abstrata <code>Migration</code> nos fornece diversos métodos para manipulação de banco de dados, o que nos permite criar tabelas, criar colunas, renomear colunas, inserir dados, executar um script SQL, dentre outras tarefas. Para conhecer mais e entender melhor esses métodos recomendo a leitura da <a href="https://github.com/schambers/fluentmigrator/wiki/Fluent-Interface" target="_blank">documentação oficial</a> sobre Fluent Interface.</p>

<p>Algo para se ter em mente na hora de criar uma migration é que não devemos agrupar muitas alterações no banco de dados em apenas uma migration, se você precisa criar duas tabelas novas por exemplo, faça isso em duas migrations  separadas e não em apenas uma. Outra boa prática é em relação aos nomes das migration, adote um padrão claro para que todo o time entenda de maneira fácil o que determinada migration irá fazer apenas olhando o nome da mesma, se sua migration irá criar uma tabela Clients por exemplo, uma boa opção seria CreateClientsTable. Outra dica é utilizar o padrão YYYYMMDDHHMM no atributo identificador da migration, dessa maneira conseguimos saber rapidamente quando foi desenvolvida e diminuímos o risco de dois desenvolvedores criarem uma migration com o mesmo identificador.</p>

<p>Criei alguns exemplos de como uso e organizo migrations no projeto de exemplo, mas lembre-se que mais importante que usar esse ou aquele padrão, é utilizar algum e fazer com que o time todo o siga.</p>

<pre><code class="c# 01 - RunBaselineScript.cs">using FluentMigrator;
using System;
using System.IO;

namespace MyProject.Data.Migrations._1._0._0._0
{
    [Migration(01)]
    public class RunBaselineScript : Migration
    {
        public override void Up()
        {
            Execute.Script(Path.Combine(Environment.CurrentDirectory, @"Scripts\02 - BaselineScript.sql"));
        }

        public override void Down()
        {
        }
    }
}
</code></pre>

<pre><code class="c# 201410192200 - CreateTestTable.cs">using FluentMigrator;

namespace MyProject.Data.Migrations._1._0._1._0
{
    [Migration(201410192200)]
    public class CreateTestTable : Migration
    {
        public override void Up()
        {
            Create.Table("Test")
                  .WithColumn("Id").AsGuid().NotNullable().PrimaryKey();
        }

        public override void Down()
        {
            Delete.Table("Test");
        }
    }
}
</code></pre>

<pre><code class="c# 201410192210 - AddColumnTestToTableTest.cs">using FluentMigrator;

namespace MyProject.Data.Migrations._1._0._1._0
{
    [Migration(201410192210)]
    public class AddColumnTestToTableTest : Migration
    {
        public override void Up()
        {
            Alter.Table("Test")
                 .AddColumn("Test").AsString(255).NotNullable();
        }

        public override void Down()
        {
            Delete.Column("Test").FromTable("Test");
        }
    }
}
</code></pre>

<pre><code class="c# 201410192215 - CreateTestTableSeedData.cs">using FluentMigrator;
using System;

namespace MyProject.Data.Migrations._1._0._1._0
{
    [Migration(201410192215)]
    public class CreateTestTableSeedData : Migration
    {
        public override void Up()
        {
            if ((MigratorEnvironment)this.ApplicationContext == MigratorEnvironment.Development)
            {
                Insert.IntoTable("Test").Row(new { Id = Guid.NewGuid(), Test = "Test 01" });
                Insert.IntoTable("Test").Row(new { Id = Guid.NewGuid(), Test = "Test 02" });
                Insert.IntoTable("Test").Row(new { Id = Guid.NewGuid(), Test = "Test 03" });
                Insert.IntoTable("Test").Row(new { Id = Guid.NewGuid(), Test = "Test 04" });
                Insert.IntoTable("Test").Row(new { Id = Guid.NewGuid(), Test = "Test 05" });
            }
        }

        public override void Down()
        {
        }
    }
}
</code></pre>

<h2>Executando as Migrations</h2>

<p>Como visto anteriormente eu criei um Migrator Runner próprio chamado MyProjectMigrator, ele pode ser utilizado para rodar as migrations nos seus projetos de teste, em uma Console Application (como é o caso do projeto de exemplo) ou em um aplicativo com uma interface gráfica amigável. Como é possível observar no projeto de exemplo a utilização do MyProjectMigrator é bastante simples e pode ser customizada, mas se preferir outras maneiras de rodar as migrations, dê uma conferida na d<a href="https://github.com/schambers/fluentmigrator/wiki/Migration-Runners" target="_blank">documentação oficial</a> sobre Migration Runners.</p>

<p>Após a execução das migrations, como pode ser verificado nas imagens abaixo, o FluentMigrator irá criar uma tabela <code>VersionInfo</code> no seu banco de dados onde salvará a identificação das migrations que foram executadas, com a data e hora da execução das mesmas bem como sua descrição, que nada mais é do que o nome das classes.</p>

<p><img src="/images/manutencao-de-schema-de-banco-de-dados-com-migrations-em-net/database.png"></p>

<p><img src="/images/manutencao-de-schema-de-banco-de-dados-com-migrations-em-net/version-info.png"></p>

<h1>Conclusão</h1>

<p>O que gosto nesta abordagem é a facilidade que qualquer desenvolvedor têm de realizar uma alteração no banco de dados, bem como compreender o que determinada migration, criada por outro desenvolvedor, irá realizar. A maneira que o FluentMigrator controla quais migrations foram executadas pelo número identificador, traz mais segurança na hora de atualizar o banco de dados de um cliente, e tudo isso permite que o processo de Integração Contínua funcione de maneira adequada. Ao invés de termos a necessidade de alguém executar algum software que gere um script de alteração de banco de dados, de maneira manual, a cada nova versão do sistema, basta fazer com que um Gerenciador ou Atualizar de Banco de Dados do projeto seja compilado com a versão correta do projeto que contêm as migrations.</p>

<p>Apesar de minha preferência pela utilização de migrations, é importante que você estude e adote a estratégia mais importante para o seu projeto. Se sua opção for utilizar migrations, não fique preso na maneira que eu utilizo, adapte para que funcione melhor para o seu projeto. Enfim, o que gostaria de passar neste post era isso, por favor deixe seu comentário com críticas, dúvidas ou sugestões.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dicas Sobre Integração Contínua Com .NET E Jenkins]]></title>
    <link href="http://www.marcelobalexandre.com/blog/2014/09/07/dicas-sobre-integracao-continua-com-net-e-jenkins/"/>
    <updated>2014-09-07T16:10:00-03:00</updated>
    <id>http://www.marcelobalexandre.com/blog/2014/09/07/dicas-sobre-integracao-continua-com-net-e-jenkins</id>
    <content type="html"><![CDATA[<p>No momento em que escrevo este post estou trabalhando em uma aplicação desktop para Windows desenvolvida na plataforma .NET. Com a primeira versão que será entregue para os usuários finais quase pronta, nossa equipe sentiu necessidade de colocar em prática o processo de Integração Contínua. Para atingir tal objetivo precisaríamos configurar uma ferramenta que nos auxiliasse a automatizar esse processo, e para isso escolhemos um servidor de Integração Contínua chamado <a href="http://jenkins-ci.org/" target="_blank">Jenkins</a>.</p>

<p>Não tenho a intenção de me aprofundar muito nos processos relacionados a Integração Contínua neste post, a ideia é documentar algumas dicas que encontrei durante a configuração do Jenkins para o nosso cenário atual. Espero que possa ser útil para mais pessoas, boa leitura. ;)</p>

<!--more-->


<h1>WTF is Continuous Integration?</h1>

<p>Basicamente, Integração Contínua ou Continuous Integration (CI) é uma prática de desenvolvimento de software considerada por muitos um dos pilares das metodologias ágeis. Ela permite que a equipe encontre e elimine problemas rapidamente, agilizando os processos de build e delivery, melhorando as respostas à falhas e aumentando a qualidade do software.</p>

<p>De maneira simplificada, um processo de integração continua deve monitorar as mudanças de código no seu repositório de controle de versão e realizar os passos necessários para gerar um executável entregável para o cliente. O que normalmente consiste em compilar a aplicação em modo Release, rodar os testes e gerar o executável.</p>

<p>Apesar de no nosso caso termos implementado um processo de Integração Contínua automatizado em um estágio um pouco mais avançado do ciclo de vida do projeto, é muito recomendável adotar essa prática já no início do desenvolvimento, obtendo assim os benefícios da Integração Contínua o mais rápido possível.</p>

<h1>The Jenkins</h1>

<p>O Jenkins é um servidor de Integração Contínua open source, multiplataforma e que pode ser utilizado para automatizar os processos de build e delivery de muitas linguagens, como C#, Ruby, PHP, Java, dentre outras. Um dos pontos principais do Jenkins são os seus inúmeros plugins, que estendem suas funcionalidades e podem ser desenvolvidos por qualquer um. Além disso, seu processo de instalação e configuração é relativamente simples.</p>

<h1>Qual processo queríamos automatizar?</h1>

<p>Como citado anteriormente, estou trabalhando em uma aplicação desktop para Windows desenvolvida na plataforma .NET, o processo de integração que precisávamos automatizar consistia basicamente nos seguintes passos:</p>

<ol>
<li>Rebuild da aplicação em Release.</li>
<li>Execução do processo de Code Analysis.</li>
<li>Execução dos testes unitários.</li>
<li>Criação dos setups.</li>
</ol>


<h1>Preparação do ambiente</h1>

<p>A instalação do Jenkins no Windows é bem simples, basta baixar o instalador no <a href="http://jenkins-ci.org/" target="_blank">site oficial</a>, executar o mesmo e seguir o passo a passo. Ao final do processo o Jenkins estará instalado como um serviço e será executado automaticamente na inicialização do Windows. Para verificar se tudo ocorreu corretamente acesse o endereço <a href="http://localhost:8080/" target="_blank">localhost:8080</a> e veja se o Jenkins está rodando.</p>

<p>Uma dica importante para evitar dores de cabeça é forçar o serviço do Jenkins a ser executado com um usuário administrador do Windows ao invés de Local System que é o padrão. No meu caso específico o Inno Setup não funcionou corretamente como Local System, para evitar esse tipo de problema execute os seguintes passos:</p>

<ol>
<li>Abra o <strong>Services</strong> do Windows.</li>
<li>Abra as propriedades do serviço do <strong>Jenkins</strong>.</li>
<li>Clique na aba <strong>Log On</strong>.</li>
<li>Marque a opção <strong>This account</strong>.</li>
<li>Selecione um usuário administrador e digite a senha.</li>
<li>Clique em <strong>OK</strong> e reinicie o serviço.</li>
</ol>


<p><img src="/images/dicas-sobre-integracao-continua-com-net-e-jenkins/jenkins-service.png"></p>

<p>Além do Jenkins você precisará que todos os softwares necessários para seus processos estejam instalados, como por exemplo o MSBuild, o NUnit, o Inno Setup, etc. Como esses softwares são normalmente executados pelo Jenkins através do Command Prompt do Windows é interessante adicioná-los as variáveis de ambiente para que não seja necessário passar o caminho completo do executável, para isso siga os seguintes passos:</p>

<ol>
<li>Abra o <strong>System Properties</strong> do Windows.</li>
<li>Clique na aba <strong>Advanced</strong>.</li>
<li>Clique no botão <strong>Environment Variables</strong>.</li>
<li>Em <strong>System Variables</strong> selecione a variável <strong>Path</strong>.</li>
<li>Clique em <strong>Edit</strong> e ao final da linha adicione os caminhos dos diretórios dos executáveis separados por ponto e vírgula.</li>
</ol>


<p><img src="/images/dicas-sobre-integracao-continua-com-net-e-jenkins/environment-variables.png"></p>

<h1>Estendendo o Jenkins</h1>

<p>Antes de criarmos nosso primeiro job podemos instalar alguns plugins interessantes, para isso acesse o endereço <a href="http://localhost:8080/pluginManager/" target="_blank">localhost:8080/pluginManager</a> do Jenkins, esta página é bem simples e intuitiva, para instalar novos plugins vá para a aba <strong>Available</strong>, para removê-los vá para a aba <strong>Installed</strong> e para atualizá-los vá para a aba <strong>Updates</strong>.</p>

<p><img src="/images/dicas-sobre-integracao-continua-com-net-e-jenkins/jenkins-manage-plugins.png"></p>

<p>Logo abaixo segue uma lista de alguns dos plugins que achei interessante e que utilizamos para esse nosso projeto. Existem centenas de outros plugins, fique a vontade para procurar novos.</p>

<ul>
<li><strong>BitBucket Plugin</strong> - Permite acessar um repositório no BitBucket e configurar para um job) ser iniciado quando um Push for realizado no repositório.</li>
<li><strong>MSBuild</strong> - Permite realizar o build de projects e solutions do Visual Studio.</li>
<li><strong>NUnit</strong> - Permite que o Jenkins utilize os relatórios gerados pelo NUnit.</li>
<li><strong>Disk Usage Plugin</strong> - Exibe estatísticas sobre o uso do disco.</li>
<li><strong>Timestamper</strong> - Adiciona o horário antes de cada linha do console do Jenkins, bastante útil para medir o tempo de realização de cada tarefa.</li>
<li><strong>Google Cloud Messaging Notification Plugin</strong> - Envia notificações para smartphones Android.</li>
<li><strong>Safe Restart Plugin</strong> - Permite realizar o restart do Jenkins de maneira segura.</li>
</ul>


<h1>Segurança</h1>

<p>Uma dica que considero importante, principalmente se você vai permitir acesso externo ao seu servidor Jenkins, é desativar a funcionalidade de Sign up e controlar as permissões dos usuários, para isso siga os seguintes passos:</p>

<ol>
<li>Acesse o endereço <a href="http://localhost:8080/configureSecurity/" target="_blank">localhost:8080/configureSecurity</a>.</li>
<li>Marque a opção <strong>Enable security</strong>.</li>
<li>Em <strong>Security Realm</strong> selecione a opção <strong>Jenkins’ own user database</strong> e desmarque a opção <strong>Allow users to sign up</strong>.</li>
<li>Em <strong>Authorization</strong> selecione a opção <strong>Matrix-based security</strong>, adicione os usuários e marque as opções que deseja que o usuário tenha permissão.</li>
</ol>


<p><img src="/images/dicas-sobre-integracao-continua-com-net-e-jenkins/jenkins-security.png"></p>

<p>Como desativamos a permissão de Sign up você precisará criar as contas dos usuários, para isso acesse o endereço <a href="http://localhost:8080/securityRealm/" target="_blank">localhost:8080/securityRealm</a>. Um detalhe importante aqui é que o <strong>Username</strong> deve ser o mesmo que foi adicionado no passo anterior para que as permissões funcionem corretamente.</p>

<h1>Configurações</h1>

<p>As configurações do Jenkins podem ser acessadas através do endereço <a href="http://localhost:8080/configure/" target="_blank">localhost:8080/configure</a>, dentre outras coisas, aqui você pode configurar o servidor SMTP de envio de e-mail, o local onde seu Git está instalado (que normalmente é reconhecido automaticamente), as configurações para o Google  Cloud Messaging Notification, etc.</p>

<h1>Criando seu primeiro job</h1>

<p>Para criar um novo job no Jenkins, acesse o endereço <a href="http://localhost:8080/newJob" target="_blank">localhost:8080/newJob</a>, digite um nome para o job, marque a opção <strong>Freestyle project</strong> e clique em <strong>OK</strong>. Você será levado para a página de configuração do seu job recém criado, está página é muito importante pois é aqui que devemos configurar tudo que o nosso job irá realizar.</p>

<h2>Custom workspace</h2>

<p>A primeira dica aqui é alterar o workspace onde o job será realizado, por padrão ele fica dentro do diretório onde o Jenkins foi instalado, que normalmente é em <code>C:\Program Files (x86)\Jenkins</code>, o que pode desencadear alguns erros relacionados a permissão de escrita se algum dos softwares utilizados pelo seu job tentar criar algum arquivo em disco. Para alterar a workspace clique no botão <strong>Advanced</strong> em  <strong>Advanced Project Options</strong>, marque a opção <strong>Use custom workspace</strong> e informe o caminho do diretório, por exemplo: <code>C:\CI\my-job\workspace</code>.</p>

<h2>Git e BitBucket</h2>

<p>Caso tenha instalado o plugin do BitBucket (e consequentemente o do Git), em <strong>Source Code Managment</strong> selecione a opção <strong>Git</strong> e configure seu repositório, sua branch e suas credenciais de acesso. Um dica importante aqui é alterar o timeout de clone e fetch do Git, o padrão é de apenas 10 minutos, o que pode não ser suficiente dependendo do tamanho do seu repositório  e da velocidade de sua conexão. Até descobrir isso perdi alguns minutos, para você não passar por isso também, clique no botão <strong>Add</strong>, escolha a opção <strong>Advanced Clone Behaviors</strong> e informe um tempo que ache razoável para o timeout.</p>

<p>Com o plugin do BitBucket você pode configurar para que seu job ser iniciado assim que um push no repositório seja feito, para isso marque a opção <strong>Build when change is pushed to BitBucket</strong>. Para essa opção funcionar você precisará adicionar um Hook de POST apontando para <a href="http://seu-ip-publico:8080/bitbucket-hook/" target="_blank">seu-ip-publico:8080/bitbucket-hook</a> nas configurações do seu repositório no BitBucket.</p>

<h2>MSBuild</h2>

<p>Para configurar o build do seu projeto no MSBuild clique em <strong>Add build step</strong> e na opção <strong>Build a Visual Studio project or solution using MSBuild</strong>. Em <strong>MSBuild Build File</strong> informe o caminho da solution no workspace do job, por exemplo: <code>C:\CI\my-job\workspace\MyProject.sln</code>. Em <strong>Command Line Arguments</strong> você deverá informar os parâmetros do seu build, por exemplo: <code>/t:Rebuild /p:Configuration="Release" /p:Platform=x86 /p:DevEnvDir="C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\IDE"</code>. O parâmetro <code>DevEnvDir</code> é importante, ele é utilizado para algumas coisas durante o processo de build, como por exemplo na execução do Code Analisys. Clicando em <strong>Advanced</strong> você também pode marcar a opção <strong>If warning set the build to Unstable</strong>.</p>

<h2>NUnit</h2>

<p>Os testes do NUnit serão executados através do Console, para configurá-lo clique em <strong>Add build step</strong> e na opção <strong>Execute Windows batch command</strong>, no campo <strong>Command</strong> você deverá informar o nome do executável do NUnit (ou o caminho completo caso não o tenha adicionado nas variáveis de ambiente do Windows), o caminho do teste no workspace e o nome do arquivo XML onde será salvo o relatório com os resultados dos testes. Por exemplo: <code>"nunit-console-x86.exe" "MyTest\bin\x86\Release\MyTest.dll" /xml=MyTest.dll-nunit-result.xml</code>.</p>

<p>Para que o Jenkins exiba os resultados dos testes clique em <strong>Add post-build action</strong> e na opção <strong>Publish NUnit test result report</strong> e em <strong>Test report XMLs</strong> e informe <code>*nunit-result.xml</code>.</p>

<h2>Inno Setup</h2>

<p>Para gerar os executáveis utilizando o Inno Setup clique novamente em <strong>Add build step</strong> e na opção <strong>Execute Windows batch command</strong>, no campo <strong>Command</strong> informe o nome do executável do Inno Setup (ou o caminho completo caso não o tenha adicionado nas variáveis de ambiente do Windows) e o caminho do seu script no workspace. Por exemplo: <code>"Compil32.exe" /cc "setup.iss"</code>.</p>

<h1>Finalizando</h1>

<p>Como comentei no início do post, não pretendia me aprofundar nos conceitos relacionados a Integração Contínua e sim compartilhar algumas dicas que acredito serem úteis. A intenção também não era ser nenhuma receita de bolo, adapte o que for necessário para a realidade do seu projeto, o Jenkins é uma ferramenta muito poderosa, explore seus recursos.</p>

<p>Espero que tenha gostado do post, por favor deixe críticas, dúvidas ou sugestões nos comentários.</p>
]]></content>
  </entry>
  
</feed>
